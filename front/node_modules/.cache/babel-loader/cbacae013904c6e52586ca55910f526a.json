{"ast":null,"code":"import _asyncToGenerator from \"C:/dev/Apricity/front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"regenerator-runtime/runtime.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport types from '@/helpers/types';\nimport axios from 'axios';\nexport default {\n  name: 'HomeView',\n  data: function data() {\n    return {\n      selectedType: null,\n      availableTypes: types.availableTypes,\n      fetchedData: {},\n      tableData: []\n    };\n  },\n  computed: {},\n  watch: {\n    selectedType: {\n      handler: function handler(val) {\n        var _this = this;\n\n        return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n          return regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (_this.fetchedData[val]) {\n                    _context.next = 5;\n                    break;\n                  }\n\n                  _context.next = 3;\n                  return _this.retrieveData(val);\n\n                case 3:\n                  _context.next = 6;\n                  break;\n\n                case 5:\n                  _this.tableData = _this.fetchedData[val];\n\n                case 6:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }))();\n      }\n    }\n  },\n  methods: {\n    retrieveData: function retrieveData(type) {\n      var _this2 = this;\n\n      axios.get(\"http://localhost:3000/census?type=\".concat(type)).then(function (response) {\n        if (response.status === 200) {\n          _this2.fetchedData[type] = response.data.data;\n        }\n      }).then(function () {\n        _this2.tableData = _this2.fetchedData[type];\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;AACA;AAEA;AACAA,kBADA;AAGAC,MAHA,kBAGA;AACA;AACAC,wBADA;AAEAC,0CAFA;AAGAC,qBAHA;AAIAC;AAJA;AAMA,GAVA;AAYAC,cAZA;AAeAC;AACAL;AACAM,aADA,mBACAC,GADA,EACA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACA,sBADA;AAAA;AAAA;AAAA;;AAAA;AAAA,yBAEA,uBAFA;;AAAA;AAAA;AAAA;;AAAA;AAIA;;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AANA;AADA,GAfA;AA0BAC;AACAC,gBADA,wBACAC,IADA,EACA;AAAA;;AACAC;AACA;AACA;AACA;AACA,OAJA,EAIAC,IAJA,CAIA;AACA;AACA,OANA;AAOA;AATA;AA1BA","names":["name","data","selectedType","availableTypes","fetchedData","tableData","computed","watch","handler","val","methods","retrieveData","type","axios","then"],"sourceRoot":"src/views","sources":["HomeView.vue"],"sourcesContent":["<template>\n  <div class=\"home\">\n    <select name=\"type selector\" v-model=\"selectedType\">\n      <option v-for=\"type in availableTypes\" :key=\"type.value\" :value=\"type.value\">\n        {{ type.label }}\n      </option>\n    </select>\n\n    <template v-if=\"selectedType\">\n     <el-table\n      :data=\"tableData\">\n      <el-table-column\n        :prop=\"selectedType\"\n        :label=\"selectedType\"\n        width=\"350\">\n      </el-table-column>\n      <el-table-column\n        prop=\"average_age\"\n        label=\"age\"\n        width=\"180\">\n      </el-table-column>\n      <el-table-column\n        prop=\"count\"\n        label=\"Count\"\n        width=\"180\">\n      </el-table-column>\n      </el-table>\n    </template>\n  </div>\n</template>\n\n<script>\nimport types from '@/helpers/types';\nimport axios from 'axios';\n\nexport default {\n  name: 'HomeView',\n\n  data() {\n    return {\n      selectedType: null,\n      availableTypes: types.availableTypes,\n      fetchedData: {},\n      tableData: [],\n    };\n  },\n\n  computed: {\n  },\n\n  watch: {\n    selectedType: {\n      async handler(val) {\n        if (!this.fetchedData[val]) {\n          await this.retrieveData(val);\n        }\n        else this.tableData = this.fetchedData[val];\n      },\n    },\n  },\n\n  methods: {\n    retrieveData(type) {\n      axios.get(`http://localhost:3000/census?type=${type}`).then((response) => {\n        if (response.status === 200) {\n          this.fetchedData[type] = response.data.data;\n        }\n      }).then(() => {\n        this.tableData = this.fetchedData[type];\n      });\n    },\n  },\n};\n</script>\n\n<style scoped>\n.el-table {\n  max-width: 60%;\n  margin: auto;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}